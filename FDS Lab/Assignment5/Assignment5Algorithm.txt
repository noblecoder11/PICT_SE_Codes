ALGORITHM

Algorithm for INSERTION sort
arr and iterations(optional) are arguments
1. Initialize iterLists as empty list
2. Iterate from arr[1] to arr[len(arr)] over the array. 
    1. Compare the current element (key) to its predecessor. 
    2. If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position up to make space for the swapped element.
    3. append the current list 'arr' to 'iterLists' 
3. If iterations is True, print number of iterations as length of iterLists and print each list in iterLists

Algorithm for SHELL sort
arr and passes(optional) are arguments
1. Initialize passLists as empty list
2. Initialize the value of interval
3. Divide the list into smaller sub-list of equal interval 'interval'
4. Sort these sub-lists using insertion sort
    1. Iterate from arr[interval] to arr[len(arr)] over the array. 
    2. Compare the current element (key) to its predecessor in the sublist i.e. the element 'interval' indices behind the key. 
    3. If the key element is smaller than its predecessor in sublist, compare it to the elements before in the sublist. Move the greater elements 'interval' positions up to make space for the swapped element.
    4. append the current list 'arr' to passLists
5. Repeat until complete list is sorted
6. If passes is True, print number of passes as length of passLists and print each list in passLists

Algorithm for TOPFIVE
1. Sort the list
2. print last 5 elements of array


Algorithm for check array
1. If length of array is less than 5, print "no. of elements should be greater than 5" and return False
2. Traverse the array and check if each element is in range 0 to 100.
    1. If 0<=arr[i]<=100, pass
    2. Else print("all percentages should be in range 0 to 100")
3. Return True


Algorithm for MAIN MENU
1. Print info about program
2. set arr as empty list
3. Store arr in other list 'originalArr'
4. Run a while loop till break is called
    1. Print choices
    2. Input choice
    3. IF choice==1
        1. call insertionSort(arr, true)
        2. Print(originalArr)
        3. Print(arr)
        4. set the arr = list(originalArr) so that it is not sorted already before next sort
    4. IF choice==2
        1. call shellSort(arr, true)
        2. Print(originalArr)
        3. Print(arr)
        4. set the arr = list(originalArr) so that it is not sorted already before next sort
    5. IF choice==3
        1. call topFive(arr)
    6. IF choice==4
        1. input new list as tempArr
        2. if checkArr() == True, set arr = list(tempArr) and originalArr = list(tempArr)
    7. IF choice==5
        1. Print("Thank you")
        2. break
    8. ELSE
        1. print("Enter valid choice(1 to 5)")



PSEUDOCODE
DEF insertionSort(arr, iterations=None):
    iterLists = []      # to store the list at each iteration

    FOR i IN RANGE(1, len(arr)):

        key = arr[i]    # key is the current element under consideration

        j = i-1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

        iterLists.append(list(arr))

    IF iterations == True:
        print("Number of iterations: ", len(iterLists))
        for lists in iterLists:
            print(lists)

DEF shellSort(arr, passes=None):
    passLists = []

    n = len(arr)
    interval = n // 2 
    WHILE interval > 0:
        FOR i in range(interval, n):
            key = arr[i]
            j = i
            while j >= interval and key < arr[j - interval]:
                arr[j] = arr[j - interval]
                j -= interval
            arr[j] = key
        interval //= 2

        passLists.append(list(arr))

    if passes == True:
        print("Number of passes: ", len(passLists))
        for lists in passLists:
            print(lists)


def topFive(arr):
    n = len(arr)
    shellSort(arr)
    for i in range(1, 6):
        print(arr[n-i])


def checkArr(arr):
    if (len(arr) < 5):
        print("Number of elements should be greater than 5")
        return False
    for i in range(len(arr)):
        if 0 <= arr[i] <= 100:
            pass
        else:
            print("All percentages should be in range 0 to 100")
            return False
    return True


# MAIN MENU

arr = []
originalArr = list(arr)

WHILE True:
    print("-" * 30)
    print("1. Insertion sort\n2. Shell Sort\n3. Print top 5\n4. Enter new list\n5. Exit\n")

    choice = input("Enter your choice: ")
    IF choice == "1":
        # True is passed as parameter to print the list at each iteration
        insertionSort(arr, True)
        print("You entered: ", originalArr)
        print("Sorted arr: ", arr)
        # Unsorting the list for next function so that it doesn't sort the sorted list again
        arr = list(originalArr)
    elif choice == "2":
        shellSort(arr, True)
        print("You entered: ", originalArr)
        print("Sorted arr: ", arr)
        arr = list(originalArr)
    elif choice == "3":
        topFive(arr)
    elif choice == "4":
        tempArr = list(
            map(float, input("Enter a list (SPACE SEPARATED): ").split()))
        if checkArr(tempArr):
            arr = list(tempArr)
            originalArr = list(tempArr)
    elif choice == "5":
        print("Thank you")
        break
    else:
        print("Enter a valid choice(1 to 5).")


LESS THAN 5
PERCENT 0 TO 100
ITERATIONS AND PASSES