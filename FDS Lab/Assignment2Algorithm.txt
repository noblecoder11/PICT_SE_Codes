ALGORITHM:

START OF CLASS
Declare a class string

Algorithm for init function:
1. Replace ',' and '.' with ' '.
2. Convert the string to lower case.
3. Split the string and store each word seperately in a list.

Algorithm for finding longest word:
1. Declare empty list temp.
2. For every word in given string, append the list of word and its length in temp, i.e. [word, its_length].
3. Sort the list temp according to the length of words in reverse order.
4. Return the first word from the sorted list as the longest word

Algorithm for counting frequency of charachter in string:
1. Initialize a variable count to be 0.
2. Start from the leftmost element of the string and compare it with given charachter for each element in string.
3. If the element is equal to the given charachter, increment the count variable.
4. Return count.

Algorithm for checking whether the string is palindrome:
1. Reverse the given string and store it in another string.
2. Compare both the strings.
3. If both strings are equal, return "Palindrome".
4. If both strings are not equal, return "NOT Palindrome".

Algorithm for finding the first appearance of a given substring:
1. Initialize a variable 'n' which stores the length of the given substring.
2. Initialize a variable first_appear equal to -1.
3. Run a loop from 0 to (length of string-n-1) and compare string[i:i+n] with given substring.
4. If the string[i:i+n] equals substring, break the loop.
5. After the for loop, if first_appear==-1, return "No occurence".
6. Else return first_appear.

Algorithm for counting occurances of the words in string:
1. Make an empty list 'checked' and an empty dictionary.
2. Start from the leftmost word in string and check if it is present in 'checked'.
3. If the word is present in 'checked', increase the value of key word by one.
4. Else if the word is not present in 'checked', append the word to 'checked' and dictionary and set the value of key word to be 1.
5. After the for loop ends, return dictionary.

Algorithm for counting occurances of a given word in string:
1. Initialize a variable count equal to 0.
2. Start from the leftmost word in the string, compare the words with given word for each word in string.
3. If the word in the list matches the given word, increase the count by 1.
4. After the for loop ends, return count.

END OF CLASS

Algorithm for main function:
1. Display the information about program.
2. Read the string and make it object of type ‘String’.
3. Run a while loop till the break statement is called.
4. Read choice
5. If choice is equal to 1, then display the returned value of function ‘longest word’.
6. if choice is equal to 2, read character, then display the returned value of function ‘character frequency (character)’.
7. if choice is equal to 3, then display the returned value of function ‘is palindrome’.
8. if choice is equal to 4, read substring, then display the returned value of function ‘first appearance (substring)’.
9. if choice is equal to 5, then display the returned value of function ‘count occurrence of each’.
10.if choice is equal to 6, read word, then display the returned value of function ‘count occurrence (word)’.
11. if choice other than these 6, then display “enter a valid choice”.
12. Ask user if he wants to continue, if user enters ‘yes’, then continue; else display ‘thank you’ and break while loop.



PSEUDOCODE:

#Start of Class
class String:
    lis=list(str.split)

    FUNCTION longest_word():
        temp=[]
        FOR word IN lis:
            temp.append([length(word), word])
        END LOOP
        temp.reverse_sort()  
        return "'{temp[0][1]}' is the longest word."
    END FUNCTION

    FUNCTION char_freq(charachter):
        count=0
        FOR index from 0 -> length(string):      
            IF charachter == string[index]:
                count=count + 1
        END LOOP
        return ("Character '{charachter}' appears {count} times in the string.")
    END FUNCTION

    FUNCTION is_palindrome():
        n=length(string)
        string2=string.reverse
        IF string2==str2:
            return ("The string is a Palindrome.")
        ENDIF
        ELSE:
            return ("Ther string is NOT a Palindrome.")
        END ELSE
    END FUNCTION

    FUNCTION first_appearance(substring):
        n=length(substring)
        first_appear=-1
        FOR index 0 -> length(string)-n-1:
            IF str[index:index+n]==substring:
                first_appear=i
                break
            ENDIF
        ENDLOOP

        IF first_appear==-1:
            return ("No occurence of substring in given string.")
        ENDIF
        ELSE:
            return "First appearance of {substring} is at index {first_appear}"
        ENDELSE
    END FUNCTION

    FUNCTION count_occurances_each():
        checked=[]
        dictionary={}
        FOR word IN lis:
            IF index IS PRESENT IN checked:
                a=dictionary[i]
                a=a+1
                dictionary[i]=a
            ENDIF
            ELSE:
                dictionary[i]=1
                checked.append(i)
            ENDELSE
        END LOOP
        print("Words in string and their frequencies are: ")
        return dictionary
    END FUNCTION

    FUNCTION count_occurances(word):
        count=0
        FOR index IN self.lis:
            IF index == word:
                count=count+1
            ENDIF
        END LOOP
        return ("'{word}' occurs {count} times in string.")
    END FUNCTION

END CLASS


START
print "MAIN MENU (INFORMATION ABOUT PROGRAM)"

print "Enter the string: "
s1=String(read string)

WHILE TRUE:
    choice=READ choice

    IF choice==1:
        print s1.longest_word()
    ENDIF
    ELSE IF choice==2:
        READ char
        print s1.char_freq(char)
    END ELSEIF
    ELSE IF choice==3:
        print s1.is_palindrome()
    END ELSEIF
    ELSE IF choice==4:
        substring= READ substring
        print s1.first_appearance(substring)
    END ELSEIF
    ELSE IF choice==5:
        print s1.count_occurances_each()
    END ELSEIF
    ELSE IF choice==6:
        READ word
        print s1.count_occurance(word)
    END ELSEIF
    ELSE:
        print "Enter a valid choice(1 to 6)."
    ENDELSE
    
    print "Do you want to continue(y/n): "
    READ cont 
    IF cont=='y':
        CONTINUE
    ENDIF
    ELSE:
        print "Thank you for playing."
        BREAK
    END ELSE
END LOOP